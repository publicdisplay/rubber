<%
  @path = "/etc/nginx/nginx.conf"
  @post = "mkdir -p /mnt/nginx/logs"
%>

user www-data;
worker_processes 10;

pid /var/run/nginx.pid;

events
{
  worker_connections 1024;
}

http
{
  include           /etc/nginx/mime.types;
  default_type      application/octet-stream;

  sendfile          on;
  tcp_nopush        on;
  tcp_nodelay       off;

  gzip              on;
  gzip_http_version 1.0;
  gzip_comp_level   2;
  gzip_proxied      any;
  gzip_types        text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  # configure log format like to Apache's "combined" log format
  log_format        main
                      '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_cookie"';

  # default log files (nothing should end up in these as moby|maui-nginx*.log should enumerate all aliases)
  error_log         /mnt/nginx/logs/error.log notice;
  access_log        /mnt/nginx/logs/access.log main;


  upstream mongrel
  {
    <%
      app_hosts = rubber_instances.for_role('app').collect { |i| i.full_name }
    %>
    <% app_hosts.each do |server| %>
      <% (0..(rubber_env.appserver_count - 1)).each do |i| %>
          server <%= server %>:<%= rubber_env.appserver_base_port + i %>;
      <% end %>
    <% end %>
   }

  # This server is setup to serve www.
  server
  {
    listen 80;
    client_max_body_size 10M;

    server_name <%= rubber_env.domain %>;

    if ( $host = www.<%= rubber_env.domain %>)
    {
      rewrite ^\/(.*)$ http://<%= rubber_env.domain %>/$1 permanent;
    }

    root <%= RAILS_ROOT + "/public" %>;

    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task
    if (-f $document_root/system/maintenance.html)
    {
      rewrite  ^(.*)$  /system/maintenance.html last;
      break;
    }

    location /
    {
      # needed to forward user's IP address to rails
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Client-IP  $remote_addr;

      # needed for HTTPS
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect false;
      proxy_max_temp_file_size 0;


      # If the file exists as a static file serve it directly without
      # running all the other rewrite tests on it
      if (-f $request_filename)
      {
        break;
      }

      # check for index.html for directory index
      # if its there on the filesystem then rewite
      # the url to add /index.html to the end of it
      # and then break to send it to the next config rules.
      if (-f $request_filename/index.html)
      {
        rewrite (.*) $1/index.html break;
      }

      # this is the meat of the rails page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html)
      {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename)
      {
        proxy_pass http://mongrel;
        break;
      }
    }

    error_page   500 502 503 504  /500.html;
    location = /500.html
    {
      root <%= RAILS_ROOT + "/public" %>;
    }
    error_page 404  /404.html;
    location = /404.html
    {
      root <%= RAILS_ROOT + "/public" %>;
    }
  }
}
